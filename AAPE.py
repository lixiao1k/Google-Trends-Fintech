import math
import numpy as np
import matplotlib.pyplot as plt
Model1_predict =[ 7.07871236,  7.00703673,  7.13992302,  7.05772803,  7.09076068,  7.12623146,
                  6.97218663,  7.06574737,  7.10262212,  7.15647165,  7.04889315,  7.10510862,
                  7.05620085,  7.14866142,  7.15184641,  7.13121031,  7.13538196,  7.13964784,
                  7.22785271,  7.11020771,  7.07142013,  7.17217532,  7.07139097,  7.0867462,
                  7.02003673,  6.90504157,  6.95275541,  6.99147345,  6.91823815,  6.94236347,
                  6.8279943 ,  6.90563794,  6.87875323,  6.78111676,  6.85696011,  6.85480832,
                  6.71533255,  6.63866657,  6.62802856,  6.71775612,  6.64349823,  6.59393555,
                  6.58002104,  6.46148827,  6.4370346 ,  6.48478995,  6.35781354,  6.30987207,
                  6.31949044,  6.25299143,  6.13746073,  6.13955085,  6.06794641,  6.05798803,
                  6.02894721,  5.94242482,  5.92669376]


Row = [7.078341579557671, 7.123672785204607, 7.07326971745971, 6.992096427415888, 7.069023426578259, 7.101675971619444,
       7.173958319756794, 7.072421900537371, 7.124478262493424, 7.0925737159746784, 7.1846291527173145, 7.191429330036379,
       7.138866999945524, 7.1592919047975645, 7.149916836132109, 7.236339342754344, 7.134890851565884, 7.126087273299125,
       7.197435354096591, 7.101675971619444, 7.122059881629142, 7.068172000388042, 6.966967138613983, 7.017506142941256,
       7.023758954738443, 6.990256500493881, 6.97914527506881, 6.872128101338986, 6.942156705699469, 6.923628628138427,
       6.846943139585379, 6.910750787961936, 6.905753276311464, 6.792344427470809, 6.71901315438526, 6.725033642166843,
       6.787844982309579, 6.7357800142423265, 6.675823221634848, 6.656726524178391, 6.54965074223381, 6.530877627725885,
       6.588926477533519, 6.46302945692067, 6.428105272684596, 6.440946540632921, 6.385194398997726, 6.282266746896006,
       6.284134161070802, 6.222576268071369, 6.18826412308259, 6.1675164908883415, 6.075346031088684, 6.07073772800249,
       5.973809611869261, 5.963579343618446, 5.932245187448011]

Model0_predict = [ 7.02860395,  7.02277775,  7.13129289,  7.04876193,  7.09991081,  7.04303916,
                   6.95144832,  7.03824791,  7.07509099,  7.15664984 , 7.04208253, 7.10081966,
                   7.06482058,  7.16869014,  7.17636303,  7.117055   , 7.14010118, 7.12952294,
                   7.22703666,  7.11256857,  7.10263517,  7.18313985 , 7.07509099, 7.09809091,
                   7.03728721,  6.92309402,  6.98011905,  6.98717433 , 6.94937227, 6.93683506,
                   6.81608361,  6.89509948,  6.87419357,  6.78766649 , 6.85966302, 6.85402414,
                   6.72606073,  6.64331834,  6.65011148,  6.72098384 , 6.66223701, 6.59458554,
                   6.57303802,  6.45222045,  6.43103805,  6.49653672 , 6.35448244, 6.31507619,
                   6.32956547,  6.26665826,  6.15052117,  6.15262824 , 6.08317019, 6.04445452,
                   6.0210442 ,  5.91704485,  5.91184513]

def expE(list):
    result = []
    for i in list:
        result.append(math.exp(i))
    return result

def aape(predict, row):
    tmp = 0.0
    for i in range(len(predict)):
        tmp = tmp + abs((predict[i] - row[i])/row[i])
    return tmp/len(predict)*100

def getAAPE():
    predict_data0 = []
    predict_data1 = []

    for i in range(57):
        predict_data0.append((math.exp(Model0_predict[i]) - math.exp(Row[i]))/math.exp(Row[i])*100)
        predict_data1.append((math.exp(Model1_predict[i]) - math.exp(Row[i]))/math.exp(Row[i])*100)
    return predict_data0[-15:-3], predict_data1[-15:-3]

def draw():
    predict_data1, predict_data2 = getAAPE()
    size = len(predict_data1)
    x = np.arange(size)

    total_width, n = 0.8, 2
    width = total_width / n
    x = x - (total_width - width)

    fig = plt.figure()
    ax = fig.add_subplot(111)
    p1 = plt.bar(x, predict_data1, width=width, color='r')
    p2 = plt.bar(x + width, predict_data2, width=width)
    plt.ylabel("Prediction Error in Percen")
    ax.set_xticks(x)
    ax.set_xticklabels(['October 2007', 'November 2007', 'December 2007', 'January 2008', 'February 2008', 'March 2008',
                        'April 2008', 'May 2008', 'June 2008', 'July 2008', 'August 2008', 'September 2008'], rotation=45)

    plt.legend((p1, p2), ('Model 0 (AAPE = 5.24%)', 'Model 1 (AAPE = 4.91%)'),  loc=3, fontsize='x-small')
    plt.show()


if __name__ == '__main__':
    # print aape(expE(Model0_predict), expE(Row))
    # print aape(expE(Model1_predict), expE(Row))
    draw()
    # 5.23751462555
    # 4.90788733871

