# -*- coding: utf-8 -*-
import math
import numpy as np
import matplotlib.pyplot as plt

real = [7.055312843339752, 7.151485463904735, 7.078341579557671, 7.123672785204607, 7.07326971745971,
        6.992096427415888, 7.069023426578259, 7.101675971619444, 7.173958319756794, 7.072421900537371,
        7.124478262493424, 7.0925737159746784, 7.1846291527173145, 7.191429330036379, 7.138866999945524,
        7.1592919047975645, 7.149916836132109, 7.236339342754344, 7.134890851565884, 7.126087273299125,
        7.197435354096591, 7.101675971619444, 7.122059881629142, 7.068172000388042, 6.966967138613983,
        7.017506142941256, 7.023758954738443, 6.990256500493881, 6.97914527506881, 6.872128101338986,
        6.942156705699469, 6.923628628138427, 6.846943139585379, 6.910750787961936, 6.905753276311464,
        6.792344427470809, 6.71901315438526, 6.725033642166843, 6.787844982309579, 6.7357800142423265,
        6.675823221634848, 6.656726524178391, 6.54965074223381, 6.530877627725885, 6.588926477533519,
        6.46302945692067, 6.428105272684596, 6.440946540632921, 6.385194398997726, 6.282266746896006,
        6.284134161070802, 6.222576268071369, 6.18826412308259, 6.1675164908883415, 6.075346031088684,
        6.07073772800249, 5.973809611869261, 5.963579343618446, 5.932245187448011]

model1_predict = [7.04896404, 7.04364064, 7.14279091, 7.06738238, 7.11411711, 7.06215349,
                  6.97846695, 7.05777573, 7.09143924, 7.16595956, 7.06127942, 7.11494753,
                  7.08205517, 7.17696078, 7.1839715, 7.12978176, 7.15083905, 7.14117372,
                  7.23027199, 7.12568251, 7.11660636, 7.19016348, 7.09143924, 7.11245427,
                  7.05689794, 6.95255962, 7.00466339, 7.0111098, 6.97657006, 6.96511481,
                  6.85478423, 6.92698102, 6.90787929, 6.8288195, 6.89460273, 6.88945049,
                  6.77253033, 6.69692861, 6.7031355, 6.76789158, 6.7142146, 6.65240145,
                  6.63271349, 6.52232249, 6.50296813, 6.56281426, 6.43301928, 6.39701379,
                  6.41025264, 6.35277433, 6.24665988, 6.24858511, 6.1851213, 6.14974679,
                  6.12835678, 6.03333259, 6.02858161, 5.92865245, 5.91810544]

model2_predict = [7.05121886, 7.0472271, 7.15360085, 7.06454426, 7.1162894, 7.06455662,
                  6.97779657, 7.07420367, 7.09417329, 7.16962085, 7.0653449, 7.11483213,
                  7.08282542, 7.17690961, 7.18189008, 7.12575677, 7.1458755, 7.14402898,
                  7.22941382, 7.12659152, 7.1158256, 7.18821115, 7.08435147, 7.11018573,
                  7.05558675, 6.95044207, 7.00160249, 7.0075659, 6.97145979, 6.96654074,
                  6.84985206, 6.9273855, 6.90915387, 6.82989719, 6.89410368, 6.88744754,
                  6.77185456, 6.69747306, 6.7016126, 6.76689882, 6.71000649, 6.65231357,
                  6.62974952, 6.5221033, 6.50405675, 6.56357955, 6.43339703, 6.39522005,
                  6.41092446, 6.35197278, 6.2454555, 6.24649956, 6.1833132, 6.1480821,
                  6.12638248, 6.03618385, 6.03012189, 5.9335134, 5.92084589]
def getmae1():
    result = 0.0
    for i in range(59):
        result = result + abs(model1_predict[i]-real[i])
    return result / 59.0

def getmae2():
    result = 0.0
    for i in range(59):
        result = result + abs(model2_predict[i]-real[i])
    return result / 59.0

def getMAE100():
    predict_data1 = []
    predict_data2 = []
    for i in range(59):
        predict_data1.append((model1_predict[i] - real[i])*100)
        predict_data2.append((model2_predict[i] - real[i])*100)
    return predict_data1[-15:-3], predict_data2[-15:-3]

def draw():
    predict_data1, predict_data2 = getMAE100()
    size = len(predict_data1)
    x = np.arange(size)

    total_width, n = 0.8, 2
    width = total_width / n
    x = x - (total_width - width)

    fig = plt.figure()
    ax = fig.add_subplot(111)
    plt.bar(x, predict_data1, width=width, label='Model 0 (MAE = 4.99%)', color='r')
    plt.bar(x + width, predict_data2, width=width, label='Model 1 (MAE = 4.98%)')
    plt.ylabel("Prediction Error in Percen")
    ax.set_xticks(x)
    ax.set_xticklabels(['October 2007', 'November 2007', 'December 2007', 'January 2008', 'February 2008', 'March 2008',
                        'April 2008', 'May 2008', 'June 2008', 'July 2008', 'August 2008', 'September 2008'], rotation=45)

    plt.legend()
    plt.show()



if __name__ == '__main__':
    draw()
    # print getmae1()
    # print getmae2()
    # print getMAE100()
    # getMAE100()
    # 0.0498897421753
    # 0.0583094801138  如果是用上月的平均房价   0.0498035804537 如果是用本月的平均房价
    # 0.0497966202375 如果没有考虑上月的平均房价